def projects = ['renren-fast', 'themall-auth-server']
//, 'themall-cart', 'themall-coupon', 'themall-gatway',
//                                        'themall-member', 'themall-order', 'themall-product', 'themall-search', 'themall-seckill',
//                                        'themall-ware', 'third-party'

pipeline {
    agent {
        node {
            label 'maven'
        }
    }

    parameters {
        string(name: 'TAG_NAME', defaultValue: 'v1.0', description: '版本名称')
    }

    environment {
        DOCKER_ID = 'docker-ali'
        GIT_ID = 'github'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        NAMESPACE = 'theangel'
        REGISTRY = 'registry.cn-shenzhen.aliyuncs.com'
        DOCKER_NAME = 'themall'
        MODEL_NAME = ''
    }

    stages {
        stage('打印参数') {
            steps {
                sh 'printenv'
                container('maven') {
                    sh ' podman ps'
                    sh ' java -version'
                }
            }
        }

        stage('checkout scm') {
            steps {
                checkout(scm)
            }
        }

        stage('构建代码') {
            steps {
//                git(credentialsId: 'gitee', url: 'https://github.com/poo0054/theangelmall.git', branch: 'master', changelog: true, poll: false)
                sh 'echo 正在构建 $GIT_URL 版本号 $GIT_BRANCH'
                container('maven') {
                    sh 'mvn clean install -Dmaven.test.skip=true -gs `pwd`/mvn-setting.xml'
                }
            }
        }

        stage('打包') {

            steps {
                container('maven') {
                    script {
                        for (project in projects) {
                            sh "cd $project && podman build -f Dockerfile -t $REGISTRY/$DOCKER_NAME/${project}:$TAG_NAME ."
                        }
                        sh 'podman images'
                    }
                }
            }
        }

        stage('部署到k8s') {
            steps {
                container('maven') {
                    script {
                        withCredentials([
                                kubeconfigFile(
                                        credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
                                        variable: 'KUBECONFIG')
                        ]) {
                            for (project in projects) {
                                //新版KubeSphere用法
                                withEnv(["MODEL_NAME=$project"]) {
                                    sh "envsubst < $MODEL_NAME/deploy/$MODEL_NAME.yaml | kubectl apply -f -"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('发布版本') {
            steps {
                input(id: 'images-to-docker', message: '是否发布版本?')
                container('maven') {
                    withCredentials([usernamePassword(credentialsId: "$GIT_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh 'git config --global user.email "poo0054.com" '
                        sh 'git config --global user.name "poo0054" '
                        sh 'git tag -a $TAG_NAME -m "$TAG_NAME" '
                        sh 'git push http://$GIT_USERNAME:$GIT_PASSWORD@github.com/poo0054/theangelmall.git   --tags --ipv4'
                    }
                    script {
                        withCredentials([usernamePassword(credentialsId: "$DOCKER_ID", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                            sh 'echo "$DOCKER_PASSWORD" | podman login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                            // 送远程
                            for (project in projects) {
                                sh "docker push $REGISTRY/$DOCKER_NAME/${project}:$TAG_NAME"
                            }
                        }
                    }
                }
            }
        }


    }

}

