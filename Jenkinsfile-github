def PROJECTS = ['renren-fast', 'themall-auth-server', 'themall-cart', 'themall-coupon', 'themall-gatway',
                'themall-member', 'themall-order', 'themall-product', 'themall-search', 'themall-seckill',
                'themall-ware', 'third-party']

pipeline {

    agent {
        node {
            label 'maven'
        }

    }

    environment {
        DOCKER_ID = 'docker-ali'
        GIT_ID = 'git'
        NAMESPACE = 'theangel'
        REGISTRY = 'registry.cn-shenzhen.aliyuncs.com'
        DOCKER_NAME = 'themall'
    }

    stages {
        stage('打印参数') {
            steps {
                sh 'printenv'
                container('maven') {
                    sh ' podman ps'
                    sh ' java -version'
                }
            }
        }

        stage('拉取代码') {
            steps {
//                git(credentialsId: 'gitee', url: 'https://github.com/poo0054/theangelmall.git', branch: 'master', changelog: true, poll: false)
                sh 'echo 正在构建 $GIT_URL 版本号 $GIT_BRANCH'
                container('maven') {
                    sh 'mvn clean install -Dmaven.test.skip=true -gs `pwd`/mvn-setting.xml'
                }
            }
        }

        stage('打包 & 推送快照') {
            steps {
                container('maven') {
                    script {
                        sh 'pdw'
                        sh 'ls'
                        for (PROJECT in PROJECTS) {
                            echo '$PROJECT'
                            sh 'echo ${PROJECT}'
                        }
//                        sh 'cd $PROJECT_NAME && docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
//                        withCredentials([usernamePassword(passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME', credentialsId: "$DOCKER_CREDENTIAL_ID")]) {
//                            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
//                            //网络太慢 不推送远程
////             sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
//                        }
                    }


                }

            }
        }

//        stage('部署到k8s') {
//            steps {
//                input(id: 'deploy-to-dev', message: '是否部署到集群中?')
//                container('maven') {
//                    //由于本地网络  先打包 在发布
//                    sh 'docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:$PROJECT_VERSION '
//                    withCredentials([
//                            kubeconfigFile(
//                                    credentialsId: env.KUBECONFIG_CREDENTIAL_ID,
//                                    variable: 'KUBECONFIG')
//                    ]) {
//                        //新版KubeSphere用法
//                        sh 'envsubst < $PROJECT_NAME/deploy/$PROJECT_NAME.yaml | kubectl apply -f -'
//                    }
//                }
//            }
//        }
//
//        stage('发布版本') {
//            when {
//                expression {
//                    return params.PROJECT_VERSION =~ /v.*/
//                }
//
//            }
//            steps {
//                container('maven') {
//                    input(id: 'release-image-with-tag', message: '是否发布当前版本镜像？')
//                    withCredentials([usernamePassword(credentialsId: "$GITEE_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
//                        sh 'git config --global user.email "poo0054.com" '
//                        sh 'git config --global user.name "poo0054" '
//                        sh 'git tag -a $PROJECT_VERSION -m "$PROJECT_VERSION" '
//                        sh 'git push http://$GIT_USERNAME:$GIT_PASSWORD@gitee.com/$PROJECT_NAME/theangelmall.git   --tags --ipv4'
//                    }
//                    sh 'docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$PROJECT_NAME:$PROJECT_VERSION '
//                }
//
//            }
//        }
//
//    }

    }

}